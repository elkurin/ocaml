-----問1-----
EPair, ECons, ENilを用意してそれらにparse
それに対応してVPair, VCons, VNilを用意し保存する
問1の段階ではEPairは VPair of expr * exprと定義したVPairに以下のように評価する
VPair (eval_expr env a, eval_expr env b)

-----問2-----
find_matchでパターンマッチを行う
find_matchにパターンとexprを渡し、それぞれ比較する
Int, Boolのときは値が同じであればよい
Pair, Consのときは両オペランドを比較して両方一致すれば良いので、そのときの環境を返しながら評価する

-----問3-----
infer_exprではEPair,EConsの両オペランドを型推論してその型と制約を返す
EConsは TyList a の型で持つことになるのでこのaを新しく作りそれとECons(e1,e2)のうちe1と束縛し、またe2はTyList aで束縛する
さらにENilもTyList a(ここでは任意のa)型であるのでTyList aの型として返す
マッチングでは match e with pi -> eiとしてeをすべてのpiの選択肢の型と束縛し、返り値の型変数aを新たに作りすべてのeiの選択肢と束縛する
さらにpiを推論したときの制約およびその型環境下で推論したeiの制約を加えて制約完成
この制約を生成するのにmatch_createとmatch_create_listを使用し、まるごと作る

-----問4-----
環境に追加する際に評価した結果をいれるのではなく、評価に必要なexprと環境をもったThunkを入れて、必要になるまで計算を止める
EVarを評価しようとしたときに計算が必要となるのでここで環境とexprを用いて実際にThunkの中身を評価する

正しく動いていることの検証は以下のように行なった
EAddのところに
print_string "ADDING\n";
をいれて以下の計算をするとADDINGが表示されなかった
# f true then 1 else x * x;;
val f : (int -> int) = <fun>
# f (2 + 3);;
- : int = 1

前回のインタプリタで行なうと以下にようになった
# f true then 1 else x * x;;
val f : (int -> int) = <fun>
# f (2 + 3);;
ADDING
- : int = 1

名前呼びでの関数fでは引数の値を評価せずに適用結果を返すことが出きるので名前呼びでは計算することはない
つまりEAddの中にはいって実際に評価することはなく、上のような結果によって名前呼びが正しくできていることがわかる

またVPairとVConsは中身まで先に評価してはいけないので、thunk * thunkとし必要になったら入れ子の部分を評価する
マッチングではVPair, VConsの中身がThunkなのでマッチングの中で必要になったら評価する

-----発展1-----
必要呼びでは名前呼びのThunkに追加してValueをつくる
これによって一度計算した後同じ評価を2度せずにすむようになる

正しく動いていることの検証は以下のように行なった
EAddのところに
print_string "ADDING\n";
を入れて以下を計算すると一度のみADDINGが表示された
# let f x = (fun y -> x * y) x;;
val f : (int -> int) = <fun>
# f (2 + 3);;
ADDING
- : int = 25

一方名前呼びでは以下のようになる
# (fun x ->  x *  x) (2 + 3);;
ADDING
ADDING
- : int = 25

これは名前呼びのときはxが呼ばれる度にxに対応するThunk of expr * envを評価しているためx*xの2度で評価している一方、必要呼びでは一度計算したものはValue型として値を保存することができ、また環境のthunk型が参照であるためほかの評価時にも利用できる

-----発展2-----
1.無限リストや無限再帰関数も通る遅延評価を実装した
まず無限リストを作るために値の再帰的定義を実装した
また必要呼びでは必要になったら評価するが、必要になるのはprint_valueするときであるので、print_valueの中でeval_exprが行なわれる
評価は必要になるまで停止するが、制限をつけない場合printするためにずっと評価を要求するので、printのところでcounterを設け、ある回数を越えたらあとは.....で出すようにした
これで
let rec one = 1 :: one;;
が評価できるようになった
ちゃんとVConsの中身の評価が遅延していない場合、print_valueにいくまえにすべての結果を計算しようとするため計算が終わらない

パターンマッチでは、PVar s とhogeを比較するときはhogeの値を計算する必要がないので要求されるまでこの値はThunkで持ち遅延する
それ以外はその場で評価し比較して普通にマッチングする

また関数の再帰でも停止する必要があり、これをVApp of expr * expr * env という型でもつ
一度EApp(e1,e2)が来たときに、まだ必要ではないので環境とともにVAppに保存し計算を停止する
実際にVAppの値が必要になったときには、EAppReal (e1,e2)の評価を保存した環境下で行うことにすれば正しく評価できる
この中でもEAppが出てくればまたVAppにはいり必要になるまで評価されない
これを実装することで無限再帰関数が表現できるようになった
たとえばフィボナッチ数列の無限リストが生成できる
（これは計算が停止しなければ無限にmapaddの中を計算し続けたりfibの値をずっと計算しようとしたりして結果が帰ってこない）

メモ化もマッチングの部分以外はうまくいっているが、マッチングの部分では、Thunkに対応する変数名がなく束縛方法がわからなかった(VConsなどをref thunkにしたがうまくいってなさそう)
これが出来ていないことによってfibの計算を何度もしておりめちゃくちゃ遅くなっている


2.例外を実装した
exception Hoge;;
で例外Hogeを定義でき、最初の文字が小文字だとエラーを返すようにした
型推論も返り値がraise Errのみのときは'a->'bとなりそうでないときは他の結果の返り値が評価結果となるようにしている


-----動作例-----

パターンマッチ
# let rec fold_right f = fun l ->  fun e ->
match l with
| [] -> e
| x :: xs -> f x (fold_right f xs e);;
val fold_right : (('o -> ('u -> 'u)) -> ('o list -> ('u -> 'u))) = <fun>
# let append_right a b=
fold_right (fun x y -> x :: y) a b;;
val append_right : ('o -> ('o list -> 'o list)) = <fun>
# append_right (1 :: 2 :: 3 :: []) (4 :: 5 :: 6 :: []);;
- : int list = [1; 2; 3; 4; 5; 6; ]


値の再帰的定義を用いた無限リストの評価
# let rec one = 1 :: one;;
val one : int list = [1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; .....]

# let rec mapadd x1 = fun x3 -> match x1 with | [] -> 
[] | x :: xs -> match x3 with | y :: ys -> (x+y) :: (mapadd xs ys) | [] -> [];;
val mapadd : (int list -> (int list -> int list)) = <fun>

無限リストに再帰関数を使用しても計算できる
# mapadd (mapadd one  one) one;;
- : int list

# let rec order = 1 :: 2 ::  (mapadd two order);;
val order : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96; 97; 98; 99; 100; 101; 102; 103; 104; 105; 106; 107; 108; 109; 110; 111; 112; 113; 114; 115; 116; 117; 118; 119; 120; 121; 122; 123; 124; 125; 126; 127; 128; 129; 130; 131; 132; 133; 134; 135; 136; 137; 138; 139; 140; 141; 142; 143; 144; 145; 146; 147; 148; 149; 150; 151; 152; 153; 154; 155; 156; 157; 158; 159; 160; 161; 162; 163; 164; 165; 166; 167; 168; 169; 170; 171; 172; 173; 174; 175; 176; 177; 178; 179; 180; 181; 182; 183; 184; 185; 186; 187; 188; 189; 190; 191; 192; 193; 194; 195; 196; 197; 198; 199; 200; 201; 202; 203; 204; 205; 206; 207; 208; 209; 210; 211; 212; 213; 214; 215; 216; 217; 218; 219; 220; 221; 222; 223; 224; 225; 226; 227; 228; 229; 230; 231; 232; 233; 234; 235; 236; 237; 238; 239; 240; 241; 242; 243; 244; 245; 246; 247; 248; 249; 250; 251; 252; 253; 254; 255; 256; 257; 258; 259; 260; 261; 262; 263; 264; 265; 266; 267; 268; 269; 270; 271; 272; 273; 274; 275; 276; 277; 278; 279; 280; 281; 282; 283; 284; 285; 286; 287; 288; 289; 290; 291; 292; 293; 294; 295; 296; 297; 298; 299; 300; 301; 302; 303; 304; 305; 306; 307; 308; 309; 310; 311; 312; 313; 314; 315; 316; 317; 318; 319; 320; 321; 322; 323; 324; 325; 326; 327; 328; 329; 330; 331; 332; 333; 334; 335; 336; 337; 338; 339; 340; 341; 342; 343; 344; 345; 346; 347; 348; 349; 350; 351; 352; 353; 354; 355; 356; 357; 358; 359; 360; 361; 362; 363; 364; 365; 366; 367; 368; 369; 370; 371; 372; 373; 374; 375; 376; 377; 378; 379; 380; 381; 382; 383; 384; 385; 386; 387; 388; 389; 390; 391; 392; 393; 394; 395; 396; 397; 398; 399; 400; 401; 402; 403; 404; 405; 406; 407; 408; 409; 410; 411; 412; 413; 414; 415; 416; 417; 418; 419; 420; 421; 422; 423; 424; 425; 426; 427; 428; 429; 430; 431; 432; 433; 434; 435; 436; 437; 438; 439; 440; 441; 442; 443; 444; 445; 446; 447; 448; 449; 450; 451; 452; 453; 454; 455; 456; 457; 458; 459; 460; 461; 462; 463; 464; 465; 466; 467; 468; 469; 470; 471; 472; 473; 474; 475; 476; 477; 478; 479; 480; 481; 482; 483; 484; 485; 486; 487; 488; 489; 490; 491; 492; 493; 494; 495; 496; 497; 498; 499; 500; 501; 502; 503; 504; 505; 506; 507; 508; 509; 510; 511; 512; 513; 514; 515; 516; 517; 518; 519; 520; 521; 522; 523; 524; 525; 526; 527; 528; 529; 530; 531; 532; 533; 534; 535; 536; 537; 538; 539; 540; 541; 542; 543; 544; 545; 546; 547; 548; 549; 550; 551; 552; 553; 554; 555; 556; 557; 558; 559; 560; 561; 562; 563; 564; 565; 566; 567; 568; 569; 570; 571; 572; 573; 574; 575; 576; 577; 578; 579; 580; 581; 582; 583; 584; 585; 586; 587; 588; 589; 590; 591; 592; 593; 594; 595; 596; 597; 598; 599; 600; 601; 602; 603; 604; 605; 606; 607; 608; 609; 610; 611; 612; 613; 614; 615; 616; 617; 618; 619; 620; 621; 622; 623; 624; 625; 626; 627; 628; 629; 630; 631; 632; 633; 634; 635; 636; 637; 638; 639; 640; 641; 642; 643; 644; 645; 646; 647; 648; 649; 650; 651; 652; 653; 654; 655; 656; 657; 658; 659; 660; 661; 662; 663; 664; 665; 666; 667; .....]

 
フィボナッチ数列の無限リストを遅延評価で出力
# let tl l = match l with x :: xs -> xs;;
val tl : ('s list -> 's list) = VFun
# let rec fib = 1 :: 1 :: (mapadd fib  (tl fib));;
val fib : int list = [1; 1; 2; 3; 5; 8; 13; 21; 34; 55; 89; 144; 233; 377; 610; 987; 1597; 2584; 4181; 6765; .....]
2のべき乗の無限リストを出力
# let rec pow = 1 :: (mapadd pow pow);;
val pow : int list = [1; 2; 4; 8; 16; 32; 64; 128; 256; 512; 1024; 2048; 4096; 8192; 16384; 32768; 65536; 131072; 262144; 524288; .....]

無限再帰関数を遅延評価を実装していることによって計算が止まる
# let rec f x = f x;;
val f : ('y -> 'z) = <fun>
# f (fun x ->  x);;
- : 'e1 = .....

例外処理
# exception Err;;
 : exception = Err
# let f x = raise Err;;
 val f : ('a -> 'b) = <fun>
# let f x = if x = 0 then raise Err else x;;
 val f : (int -> int) = <fun>
# f 1;;
 - : int = 1
# f 0;;
 - : int = Exception. Err
# exception err;;
 Error: Syntax error

