-----問1-----
ancestorが同じものを血縁関係とみなした
つまり、夫婦は血縁関係ではなく、また夫婦のうち夫の子は妻とは血縁関係にない
題のままの定義であると祖先の定義されていない祖父の代は誰とも血縁関係にならず題意に反するのでancestor(X,Y)の定義で自分自身がancestorをいれた

動作例
?- bloodrelative(tonarinoojisan, miho).
false.

?- bloodrelative(kobo, miho).
true .

?- bloodrelative(kobo, iwao).
true .

?- bloodrelative(mine, iwao).
false.

?- bloodrelative(miho, kakusigo).
true .

?- bloodrelative(sanae, kakusigo).
false.

?- bloodrelative(sanae, koji).
false.

?- bloodrelative(tonarinooya, tonarinoojisan).
true .

-----問2-----
multを実装すると、mult(X, s(z), s(s(z))). のようにすると、割り算も計算できる
mult(X, Y, 6). とすると6の約数が出力される
この計算は普通に以下のように実装すると割り算が止まらない
mult(s(X), Y, W) :- mult(X, Y, Z), add(Y, Z, W).
これは先にmultをどんどん掘り進めてしまいいつまでもWの生成にたどり着かないからである
一方以下のようにすると割り算が止まるが掛け算がとまらなくなる
mult(s(X), Y, W) :- add(Y, Z, W), mult(X, Y, Z).
そこでnobigger関数を作ることで大小関係を導入し、ドメインを制限すると計算を止めることが出来る

動作例
?- mult(s(s(s(z))), s(s(z)), Z).
Z = s(s(s(s(s(s(z)))))) ;
false.

?- mult(s(s(z)), s(s(s(z))), Z).
Z = s(s(s(s(s(s(z)))))) ;
false.

?- mult(X, Y, s(s(s(s(s(s(z))))))).
X = s(z),
Y = s(s(s(s(s(s(z)))))) ;
X = s(s(z)),
Y = s(s(s(z))) ;
X = s(s(s(z))),
Y = s(s(z)) ;
X = s(s(s(s(s(s(z)))))),
Y = s(z) ;
false.

?- mult(z, Y, s(z)).
false.

?- mult(s(s(z)), Y, s(s(s(s(z))))).
Y = s(s(z)) ;
false.

?- mult(s(s(z)), Y, s(s(s(z)))).
false.

?- mult(s(s(z)), Y, z).
Y = z ;
false.

?- mult(z, Y, z).
true .


-----問3-----
concatの際、
reverse(X, Y) :- [A|B] = X, append(C, [A], Y), reverse(B, C).
これだとreverse([1,2,3], X).の計算が止まらず、
reverse(X, Y) :- [A|B] = X, reverse(B, C), append(C, [A], Y).
これだとreverse(X, [1,2,3]).の計算が止まらない
ここで制約としてX,Yの長さが等しいことをいれると計算が停止する
ただし以下のようにX,Yの長さを別個に数えてそれを比較してしまうと、Xについて試し続けるまたはYについて試し続けるため計算が止まらないので一度に比較することが必要
len([], z).
len([_|XS], s(X)) :- len(XS, X).



?- reverse([1,2,3], X).
X = [3, 2, 1] ;
false.

?- reverse(X, [1,2,3]).
X = [3, 2, 1] ;
false.

?- concat([[1], X, [3,4]], [1,2,3,3,3,4]).
X = [2, 3, 3] ;
false.

?- concat([[1], [2,3], [3,4]], X).
X = [1, 2, 3, 3, 4].

?- concat([X, [2,3]], [1,1,2,3]).
X = [1, 1] ;
false.

?- concat([X, Y, [2,3]], [1,1,2,3]).
X = [],
Y = [1, 1] ;
X = Y, Y = [1] ;
X = [1, 1],
Y = [] ;
false.


-----問4-----
hamiltonがハミルトン路
hamilton_closeがハミルトン閉路

ハミルトン路では頂点集合どの点が最初になる場合もすべて調べる必要がある
そのあと、appendを用いて辺集合からある辺をとってきて、その終点を次の始点としたハミルトン路が存在すればよいというアルゴリズムをそのまま実装した
ただし、ハミルトン閉路が存在する場合すべての頂点を通るのでどこを始点にしても良い

?- hamilton_close([1,2,3,4,5], [[3|4],[1|2],[4|5],[2|3],[5|1],[5|2]]).
true ;
false.

?- hamilton([1,2,3,4], [[2|3], [3|4], [4|1]]).
true ;
false.

以下の2つは同じ頂点辺集合だが
?- hamilton([1,2,3,4], [[1|2], [2|3], [3|4]]).
true ;
false.

?- hamilton_close([1,2,3,4], [[1|2], [2|3], [3|4]]).
false.


以下のケースは4点からなる両向きの辺がはられた完全グラフであるので、ハミルトン路は	4!=24通りある
実際24回trueが出ており正しい結果となっている
?- hamilton([1,2,3,4], [[1|2], [2|1], [1|3], [3|1], [1|4], [4|1], [2|3], [3|2], [2|4], [4|2], [3|4], [4|3]]).
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
true ;
false.

一方以下のケースはハミルトン閉路なので、始点は一意に定めても問題なく、始点を1に定めている
したがってハミルトン閉路は3!=6見つかり、実際以下のようにハミルトン閉路が数え上げられている
?- hamilton_close([1,2,3,4], [[1|2], [2|1], [1|3], [3|1], [1|4], [4|1], [2|3], [3|2], [2|4], [4|2], [3|4], [4|3]]).
true ;
true ;
true ;
true ;
true ;
true ;
false.

?- hamilton([1,2,3,4,5], [[2|3], [2|4], [4|1], [1|4], [4|2]]).
false.

?- hamilton([1,2,3,4,5], [[2|3], [2|4], [4|1], [1|4], [4|2], [3|5]]).
true ;
false.

?- hamilton([1,2,3,4,5], [[2|3], [2|4], [4|1], [1|4], [4|2], [3|5], [5|1]]).
true ;
true ;
true ;
true ;
true ;
false.

