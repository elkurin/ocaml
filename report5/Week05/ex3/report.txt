-----問4-----
OCamlの仕様では以下のように評価されたので、AND OR を EQ LT より上にするように気を付けた
# if 1 = 1 && 2 = 2 then true else false;;
- = true

またOCamlの仕様ではANDの方がORより強いので以下のような実行結果になるようANDとORの高さにも気を付けた
# false && true || true;;
- = true
# true || true && false;;
- = true

-----発展1-----
副作用を除去しようとしたが、mlyファイルが勝手に例外を生成してしまうので、結局try with構文を使った
printfも除去しなくてよくなったので良い

-----発展2-----
DDeclというものをCDeclと別に用意して、let_exprでLETが並ぶときの文法に対応した
次のLETの式の中身をcommandにしてまたeval_commandを適応した
新しく追加された環境変数をリストに持つことで以下のようなものを弾くように設計した
let a = 1 and  b = 2 and c = 1 && 2;;
(eval error で一部の環境変数が弾かれる場合、他もすべて弾く)

-----発展3-----
let and で連なるのがlet式だけの場合とそのあとにinがつく場合で出力を区別しなくてはならなかったことが困難だった
結局INがあるものと無いもので分けることで出力を分けた
let ~ and  ~ 
let ~
という構文は弾くようにparserを作成した
