栗本英理子 171010

-----問1-----
ソースコードは1-1-171010.ml

動作例
# sum_to 4;;
- : int = 10
# sum_to 10;;
- : int = 55

# is_prime 3;;
- : bool = true
# is_prime 16;;
- : bool = false

# gcd 4 5;;
- : int = 1
#gcd 65 39;;
- : int = 13

-----問2-----
ソースコードは1-2-171010.ml

動作例
# twice (fun x -> 2 * x) 3;;
- : int = 12
# let add x = x + 10;;
val add : int -> int = <fun>
# twice add 4;;
- : int = 24

# repeat (fun x -> 2 * x) 4 3;;
- : int = 48

-----問3-----
ソースコードは1-3-171010.ml

動作例
# sum_to 4;;
- : int = 10
# sum_to 10;;
- : int = 55
# is_prime 3;;
- : bool = true
# is_prime 9;;
- : bool = false
# gcd 3 4;;
- : int = 1
# gcd 24 32;;
- : int = 8

考察
fixは不動点コンビネータとして作用する

-----問4-----
ソースコードは1-4-171010.ml

動作例
# fold_right (fun x y -> x + y) [1; 2; 3] 1;;
- : int = 7
# fold_left (fun x y -> x * 2 + y) 3 [1; 2; 3];;
- : int = 35

考察
fold_leftの方が末尾再帰で見やすい
fold_rightはlistのreverseをfold_leftに入れれば実現できるので、末尾再帰の方がうれしいならfold_rightもfold_leftにできそう

-----問5-----
ソースコードは1-5-171010.ml

動作例
# append [1; 2] [3; 4; 5]
- : int list = [1; 2; 3; 4; 5]
# filter (fun x -> x > 3) [2; 3; 4; 5; 2; 6; 3; 4];;
- : int list = [4; 5; 6; 4]

考察
雰囲気がfold_left, fold_rightに似ているので書き換えることが出来そう

-----問6-----
ソースコードは1-6-171010.ml

動作例
# append_left [1; 2; 3] [4; 5];;
- : int list = [1; 2; 3; 4; 5]
# filter_left (fun x -> x > 3) [1; 2; 3; 4; 5; 2; 5];;
- : int list = [4; 5; 5]

考察
問5の考察がまさに利用された
問4の考察のとおり、fold_rightをfold_leftで書き換えることでわかりやすかった

-----問7----
ソースコードは1-7-171010.ml

動作例
# perm [1;2;3];;
- : int list list =
[[1; 2; 3]; [1; 3; 2]; [2; 1; 3]; [2; 3; 1]; [3; 1; 2]; [3; 2; 1]]

考察
残りの要素をリストに持ち、さらにその中から次に選ぶものを先頭にとるリストをforループの感じで持つ
このやり方だと残りの要素が残ったまま先に次に選ぶものリストがなくなってしまうと例えば[1; 2]のときに[1]が出てきてしまうので、処理のあとに、サイズの異なるものをfilterを利用して排除した
計算量はすべてを網羅する時点でO(n!)なので何をしても大変

-----発展1-----
ソースコードは1-8-171010.ml

発展2を先に解いたので、それをこの問に利用した
reverse関数はfold_leftを用いており、
reverse_rightはfold_rightを用いて書いたfold_left_rを利用している

動作例
# reverse [1; 2; 3; 4; 5];;
- : int list =  [5; 4; 3; 2; 1]
# reverse_right [2; 3; 4];;
- : int list = [4; 3; 2];;

考察
先に発展2をやって関数の形のままいじったことで議論が見やすくなった

-----発展2-----
ソースコードは1-9-171010.ml

fold_right_l がfold_rightをfold_leftで書いたもの
append_rightがこれを適応している(動作確認用)
fold_left_rがfold_leftをfold_rightで書いたもの
append_leftがこれを適応している(動作確認用)

動作例
# append_right [1; 2; 3] [4; 5];;
- : int list = [1; 2; 3; 4; 5];;
# append_left [5; 4; 3] [2; 1];;
- : int list = [5; 4; 3; 2; 1];;

考察
fold_rightはfold_leftにreverseしたlistをいれることで実現できるが多分そういうことではないので、今回は関数そのものを見る
fold_rightはまずfold_leftのeに当たる部分に関数を入れていき計算する関数を作成してしまい、それにeを与えて答えを計算する
fold_leftも入れ替えるだけでほぼ同じ

-----発展3-----
ソースコードは1-10-171010.ml

addはfをn回したものを引数にしてfをさらにm回する関数を返せばよい
mulはfをn回する関数を受け取ってそれをm回する関数を返せばよい
subは分からなかったので、一応自明解を書いておいた

動作例
# (add 2 3) (fun x -> x * 2) 1;;
- : int = 32
# (mull 2 3) (fun x -> x * 2) 1;;
- : int = 64
" (sub 3 1) (fun x -> x * 2) 1;;
- : int = 4
